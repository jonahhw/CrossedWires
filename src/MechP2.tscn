[gd_scene load_steps=5 format=2]

[ext_resource path="res://src/Mech.tscn" type="PackedScene" id=1]
[ext_resource path="res://src/MechP2.gd" type="Script" id=2]

[sub_resource type="Shader" id=4]
code = "shader_type canvas_item;
// based on this example: https://godotshaders.com/shader/palette-swap-no-recolor-recolor/

uniform bool swap = false;

uniform vec4 original_colour_0: hint_color;
uniform vec4 original_colour_1: hint_color;
uniform vec4 original_colour_2: hint_color;
uniform vec4 original_colour_3: hint_color;
uniform vec4 original_colour_4: hint_color;
uniform vec4 original_colour_5: hint_color;
uniform vec4 original_colour_6: hint_color;
uniform vec4 original_colour_7: hint_color;

uniform vec4 new_colour_0: hint_color;
uniform vec4 new_colour_1: hint_color;
uniform vec4 new_colour_2: hint_color;
uniform vec4 new_colour_3: hint_color;
uniform vec4 new_colour_4: hint_color;
uniform vec4 new_colour_5: hint_color;
uniform vec4 new_colour_6: hint_color;
uniform vec4 new_colour_7: hint_color;

const float precision = 0.1;

vec4 swap_colour(vec4 colour) {
	// laid out stupidly because GLES2 doesn't support array initialization for probably some very good reason
	vec4 original_colours[8];
    original_colours[0] = original_colour_0;
    original_colours[1] = original_colour_1;
    original_colours[2] = original_colour_2;
    original_colours[3] = original_colour_3;
    original_colours[4] = original_colour_4;
    original_colours[5] = original_colour_5;
    original_colours[6] = original_colour_6;
    original_colours[7] = original_colour_7;
	
	vec4 new_colours[8];
    new_colours[0] = new_colour_0;
    new_colours[1] = new_colour_1;
    new_colours[2] = new_colour_2;
    new_colours[3] = new_colour_3;
    new_colours[4] = new_colour_4;
    new_colours[5] = new_colour_5;
    new_colours[6] = new_colour_6;
    new_colours[7] = new_colour_7;
	
	if (swap){
		for (int i = 0; i < 8; i++) {
			if (distance(colour, original_colours[i]) < precision) {
				return new_colours[i];
			}
		}
	}
	
	return colour;
}


void fragment() {
	COLOR = swap_colour(texture(TEXTURE,UV));
	
}"

[sub_resource type="ShaderMaterial" id=5]
shader = SubResource( 4 )
shader_param/swap = true
shader_param/original_colour_0 = Color( 0.0509804, 0.164706, 0.270588, 1 )
shader_param/original_colour_1 = Color( 0.12549, 0.235294, 0.337255, 1 )
shader_param/original_colour_2 = Color( 0.329412, 0.305882, 0.407843, 1 )
shader_param/original_colour_3 = Color( 0.552941, 0.411765, 0.478431, 1 )
shader_param/original_colour_4 = Color( 0.815686, 0.505882, 0.34902, 1 )
shader_param/original_colour_5 = Color( 1, 0.666667, 0.368627, 1 )
shader_param/original_colour_6 = Color( 1, 0.831373, 0.639216, 1 )
shader_param/original_colour_7 = Color( 1, 0.92549, 0.839216, 1 )
shader_param/new_colour_0 = Color( 0.270588, 0.0509804, 0.129412, 1 )
shader_param/new_colour_1 = Color( 0.337255, 0.12549, 0.14902, 1 )
shader_param/new_colour_2 = Color( 0.407843, 0.333333, 0.305882, 1 )
shader_param/new_colour_3 = Color( 0.552941, 0.45098, 0.411765, 1 )
shader_param/new_colour_4 = Color( 0.345098, 0.815686, 0.486275, 1 )
shader_param/new_colour_5 = Color( 0.372549, 1, 0.384314, 1 )
shader_param/new_colour_6 = Color( 0.74902, 1, 0.639216, 1 )
shader_param/new_colour_7 = Color( 0.901961, 1, 0.839216, 1 )

[node name="MechP2" instance=ExtResource( 1 )]
script = ExtResource( 2 )

[node name="CharacterSprite" parent="." index="3"]
material = SubResource( 5 )
